diff --git a/node_modules/dva-core/dist/index.esm.js b/node_modules/dva-core/dist/index.esm.js
index e3c0744..fbc0323 100644
--- a/node_modules/dva-core/dist/index.esm.js
+++ b/node_modules/dva-core/dist/index.esm.js
@@ -311,85 +311,87 @@ function prefixType(type, model) {
 
 function getSaga(effects$1, model, onError, onEffect) {
   var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
-  return (
-    /*#__PURE__*/
-    _regeneratorRuntime.mark(function _callee3() {
-      var key;
-      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
-        while (1) {
-          switch (_context3.prev = _context3.next) {
-            case 0:
-              _context3.t0 = _regeneratorRuntime.keys(effects$1);
-
-            case 1:
-              if ((_context3.t1 = _context3.t0()).done) {
-                _context3.next = 7;
-                break;
-              }
+  function _callee3() {
+    var key;
+    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
+      while (1) {
+        switch (_context3.prev = _context3.next) {
+          case 0:
+            _context3.t0 = _regeneratorRuntime.keys(effects$1);
 
-              key = _context3.t1.value;
+          case 1:
+            if ((_context3.t1 = _context3.t0()).done) {
+              _context3.next = 7;
+              break;
+            }
 
-              if (!Object.prototype.hasOwnProperty.call(effects$1, key)) {
-                _context3.next = 5;
-                break;
-              }
+            key = _context3.t1.value;
+
+            if (!Object.prototype.hasOwnProperty.call(effects$1, key)) {
+              _context3.next = 5;
+              break;
+            }
 
-              return _context3.delegateYield(
-              /*#__PURE__*/
-              _regeneratorRuntime.mark(function _callee2() {
-                var watcher, task;
-                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
-                  while (1) {
-                    switch (_context2.prev = _context2.next) {
-                      case 0:
-                        watcher = getWatcher(key, effects$1[key], model, onError, onEffect, opts);
-                        _context2.next = 3;
-                        return effects.fork(watcher);
-
-                      case 3:
-                        task = _context2.sent;
-                        _context2.next = 6;
-                        return effects.fork(
-                        /*#__PURE__*/
-                        _regeneratorRuntime.mark(function _callee() {
-                          return _regeneratorRuntime.wrap(function _callee$(_context) {
-                            while (1) {
-                              switch (_context.prev = _context.next) {
-                                case 0:
-                                  _context.next = 2;
-                                  return effects.take("".concat(model.namespace, "/@@CANCEL_EFFECTS"));
-
-                                case 2:
-                                  _context.next = 4;
-                                  return effects.cancel(task);
-
-                                case 4:
-                                case "end":
-                                  return _context.stop();
-                              }
+            return _context3.delegateYield(
+            /*#__PURE__*/
+            _regeneratorRuntime.mark(function _callee2() {
+              var watcher, task;
+              return _regeneratorRuntime.wrap(function _callee2$(_context2) {
+                while (1) {
+                  switch (_context2.prev = _context2.next) {
+                    case 0:
+                      watcher = getWatcher(key, effects$1[key], model, onError, onEffect, opts);
+                      _context2.next = 3;
+                      return effects.fork(watcher);
+
+                    case 3:
+                      task = _context2.sent;
+                      _context2.next = 6;
+                      return effects.fork(
+                      /*#__PURE__*/
+                      _regeneratorRuntime.mark(function _callee() {
+                        return _regeneratorRuntime.wrap(function _callee$(_context) {
+                          while (1) {
+                            switch (_context.prev = _context.next) {
+                              case 0:
+                                _context.next = 2;
+                                return effects.take("".concat(model.namespace, "/@@CANCEL_EFFECTS"));
+
+                              case 2:
+                                _context.next = 4;
+                                return effects.cancel(task);
+
+                              case 4:
+                              case "end":
+                                return _context.stop();
                             }
-                          }, _callee);
-                        }));
+                          }
+                        }, _callee);
+                      }));
 
-                      case 6:
-                      case "end":
-                        return _context2.stop();
-                    }
+                    case 6:
+                    case "end":
+                      return _context2.stop();
                   }
-                }, _callee2);
-              })(), "t2", 5);
+                }
+              }, _callee2);
+            })(), "t2", 5);
 
-            case 5:
-              _context3.next = 1;
-              break;
+          case 5:
+            _context3.next = 1;
+            break;
 
-            case 7:
-            case "end":
-              return _context3.stop();
-          }
+          case 7:
+          case "end":
+            return _context3.stop();
         }
-      }, _callee3);
-    })
+      }
+    }, _callee3);
+  }
+  _callee3.modelName = model.namespace
+  return (
+    /*#__PURE__*/
+    _regeneratorRuntime.mark(_callee3)
   );
 }
 
diff --git a/node_modules/dva-core/dist/index.js b/node_modules/dva-core/dist/index.js
index 439e8c5..64b669d 100644
--- a/node_modules/dva-core/dist/index.js
+++ b/node_modules/dva-core/dist/index.js
@@ -440,85 +440,87 @@ function prefixType(type, model) {
 
 function getSaga(effects, model, onError, onEffect) {
   var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
-  return (
-    /*#__PURE__*/
-    regeneratorRuntime.mark(function _callee3() {
-      var key;
-      return regeneratorRuntime.wrap(function _callee3$(_context3) {
-        while (1) {
-          switch (_context3.prev = _context3.next) {
-            case 0:
-              _context3.t0 = regeneratorRuntime.keys(effects);
-
-            case 1:
-              if ((_context3.t1 = _context3.t0()).done) {
-                _context3.next = 7;
-                break;
-              }
+  function _callee3() {
+    var key;
+    return regeneratorRuntime.wrap(function _callee3$(_context3) {
+      while (1) {
+        switch (_context3.prev = _context3.next) {
+          case 0:
+            _context3.t0 = regeneratorRuntime.keys(effects);
 
-              key = _context3.t1.value;
+          case 1:
+            if ((_context3.t1 = _context3.t0()).done) {
+              _context3.next = 7;
+              break;
+            }
 
-              if (!Object.prototype.hasOwnProperty.call(effects, key)) {
-                _context3.next = 5;
-                break;
-              }
+            key = _context3.t1.value;
+
+            if (!Object.prototype.hasOwnProperty.call(effects, key)) {
+              _context3.next = 5;
+              break;
+            }
 
-              return _context3.delegateYield(
-              /*#__PURE__*/
-              regeneratorRuntime.mark(function _callee2() {
-                var watcher, task;
-                return regeneratorRuntime.wrap(function _callee2$(_context2) {
-                  while (1) {
-                    switch (_context2.prev = _context2.next) {
-                      case 0:
-                        watcher = getWatcher(key, effects[key], model, onError, onEffect, opts);
-                        _context2.next = 3;
-                        return createSagaMiddleware.effects.fork(watcher);
-
-                      case 3:
-                        task = _context2.sent;
-                        _context2.next = 6;
-                        return createSagaMiddleware.effects.fork(
-                        /*#__PURE__*/
-                        regeneratorRuntime.mark(function _callee() {
-                          return regeneratorRuntime.wrap(function _callee$(_context) {
-                            while (1) {
-                              switch (_context.prev = _context.next) {
-                                case 0:
-                                  _context.next = 2;
-                                  return createSagaMiddleware.effects.take("".concat(model.namespace, "/@@CANCEL_EFFECTS"));
-
-                                case 2:
-                                  _context.next = 4;
-                                  return createSagaMiddleware.effects.cancel(task);
-
-                                case 4:
-                                case "end":
-                                  return _context.stop();
-                              }
+            return _context3.delegateYield(
+            /*#__PURE__*/
+            regeneratorRuntime.mark(function _callee2() {
+              var watcher, task;
+              return regeneratorRuntime.wrap(function _callee2$(_context2) {
+                while (1) {
+                  switch (_context2.prev = _context2.next) {
+                    case 0:
+                      watcher = getWatcher(key, effects[key], model, onError, onEffect, opts);
+                      _context2.next = 3;
+                      return createSagaMiddleware.effects.fork(watcher);
+
+                    case 3:
+                      task = _context2.sent;
+                      _context2.next = 6;
+                      return createSagaMiddleware.effects.fork(
+                      /*#__PURE__*/
+                      regeneratorRuntime.mark(function _callee() {
+                        return regeneratorRuntime.wrap(function _callee$(_context) {
+                          while (1) {
+                            switch (_context.prev = _context.next) {
+                              case 0:
+                                _context.next = 2;
+                                return createSagaMiddleware.effects.take("".concat(model.namespace, "/@@CANCEL_EFFECTS"));
+
+                              case 2:
+                                _context.next = 4;
+                                return createSagaMiddleware.effects.cancel(task);
+
+                              case 4:
+                              case "end":
+                                return _context.stop();
                             }
-                          }, _callee);
-                        }));
+                          }
+                        }, _callee);
+                      }));
 
-                      case 6:
-                      case "end":
-                        return _context2.stop();
-                    }
+                    case 6:
+                    case "end":
+                      return _context2.stop();
                   }
-                }, _callee2);
-              })(), "t2", 5);
+                }
+              }, _callee2);
+            })(), "t2", 5);
 
-            case 5:
-              _context3.next = 1;
-              break;
+          case 5:
+            _context3.next = 1;
+            break;
 
-            case 7:
-            case "end":
-              return _context3.stop();
-          }
+          case 7:
+          case "end":
+            return _context3.stop();
         }
-      }, _callee3);
-    })
+      }
+    }, _callee3);
+  }
+  _callee3.modelName = model.namespace
+  return (
+    /*#__PURE__*/
+    regeneratorRuntime.mark(_callee3)
   );
 }
 
